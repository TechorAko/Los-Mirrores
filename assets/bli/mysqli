<?php

class bancodedados {

    // Host, Usuário, Senha, Banco de Dados e Conexão.

    private $host;
    private $uname;
    private $pwd;
    public $database;
    public $con;

    public $tabelas; // Nome das tabelas disponíveis no banco de dados.
    public $insert_id;

    function __construct($host, $uname, $pwd, $database) { // Construtor do objeto.
        // Ao criar o objeto, a conexão será feita.
        $this->host     = $host;
        $this->uname    = $uname;
        $this->pwd      = $pwd;
        $this->database = $database;
        $this->con      = mysqli_connect($host, $uname, $pwd, $database);
        $con            = $this->con;

        $con->set_charset('utf8'); // Especifica o Charset.
        if($con->connect_error) { die("Falha ao realizar conexão: " . $con->connect_error); } // Se houver algum erro na conexão.

        // Gerando as tabelas
        $sql = $con->query("SHOW TABLES");
        while ($linha = mysqli_fetch_array($sql, MYSQLI_NUM)) { $this->tabelas[] = $linha[0]; }
        
    }

    function error_msg($sql) { echo "Erro: " . $sql . "<br>" . $this->$con->error; } // Mensagem de erro.

    function query($sql) {
        if($this->con->query($sql)) {
            if(isset($this->con->insert_id) && !empty($this->con->insert_id))  { $this->insert_id = $this->con->insert_id; }
            return TRUE;
        } else { return FALSE; }
    }

    function fetch_array($sql, $mode = MYSQLI_BOTH) {
        $query = $this->con->query($sql);
        return mysqli_fetch_array($query, $mode);
    }

    function fetch_multiarray($sql, $mode = MYSQLI_BOTH, $array_value = NULL) {
        // Essa função tem em mente retornar uma matriz (ou array multidimensional) todas as linhas que forem forem retornadas do mysqli_fetch-array().
        $query = $this->con->query($sql); // Define o comando a ser utilizado.
        while ($linha = mysqli_fetch_array($query, $mode))  { // Enquanto houver linhas, será buscado. Obs: $mode está como padrão para MYSQLI_BOTH, o que significa que retornará um array com ambos os registros numerados e nomeados.
            if($array_value == NULL) { $array[] = $linha; } // Caso houver alguma especificação de qual valor dentro da linha for pego. (Para casos onde você queira pegar o nome por a caso, nunca surgiu essa necessidade, magina.)
            else { $array[] = $linha[$array_value]; } // Queria na verdade fazer isso sem condicional, mas não soube como botar essa linha de comando em palavras.
        }
        if(isset($array)) { return $array; } else { return NULL; } // Verifica se algum valor foi de fato encontrado, caso o contrário retornará um aviso de que não foram encontrados registros.
    }

    function descrever($tabela) {
        $sql = "SHOW FIELDS FROM $tabela";
        return $this->fetch_multiarray($sql, MYSQLI_ASSOC);
    }

    function inserir($table_name, $values) { // Atributos e valores DEVEM ser arrays de dados para que possam ser compatíveis universalmente.
        $attributes_string = "`" . implode('`,`', array_keys($values)) . "`"; // Converte o array de atributos em uma string.
        //$values_string = "'" . implode("','", $values) . "'"; // Converte o array de valores em uma string.
        $values_string = "";
        foreach($values as $value) { $value = is_string($value) ? addslashes($value) : $value; $values_string .= "'". $value ."',"; }
        $values_string = rtrim($values_string, ",");
        
        // Insere os dados na tabela
        $sql = "INSERT INTO $table_name ($attributes_string) VALUES ($values_string)";
        $this->con->query($sql);
        $this->insert_id = $this->con->insert_id;
    }

    function alterar($tabela, $valores, $onde) {
        // Montar a lista de atributos e valores a serem atualizados
        foreach ($valores as $atributo => $valor) { $set[] = "`$atributo` = '". addslashes($valor) ."'"; } // Converte no formato MYSQL.
        $set = implode(", ", $set); // Então converte em string para o uso no comando.
        foreach ($onde as $referencia => $pesquisa) { $where[] = "$referencia = '$pesquisa'"; } // Converte no formato MYSQL.
        $where = implode(" AND ", $where); // Então converte em string para o uso no comando.

        $sql = "UPDATE $tabela SET $set WHERE $where";
        if($this->con->query($sql) === TRUE){ return TRUE; } else { return FALSE; }
    }

    function excluir($tabela, $onde) {
        foreach ($onde as $referencia => $pesquisa) { $where[] = "$referencia = '$pesquisa'"; } // Converte no formato MYSQL.
        $where = implode(" AND ", $where); // Então converte em string para o uso no comando.

        $sql = "DELETE FROM $tabela WHERE $where"; // Comando para deletar o registro baseado em um valor dentro do registro.
        $this->query($sql);
        if($this->con->query($sql) === TRUE) { return "Registro excluído com sucesso!<br>"; } else { $this->error_msg($sql); } // Retorna um feedback se requisitado.
    }
    
    function buscar($tabelas, $atributos = "*", $pesquisa = NULL, $like = FALSE, $orderby = NULL, $groupby = NULL, $limit = NULL) {

        // Verifica se o parâmetro tabela é um array
        if (is_array($tabelas)) {
            $tabelas = implode(', ', $tabelas);
        }

        // Verifica se o parâmetro atributos é um array
        if (is_array($atributos)) {
            $atributos = implode(', ', $atributos);
        }

        // Monta a cláusula WHERE da consulta
        $where = '';
        if ($pesquisa) {
            foreach ($pesquisa as $atributo => $valor) {
                $valor = addslashes($valor);

                $operator = "=";

                // Verifica se há o nome de uma tabela no atributo
                if (strpos($atributo, '.') !== false) {
                    $where .= ($where ? ' AND ' : '') . "$atributo = $valor";
                    continue; // Pula para a próxima iteração
                }

                // Verifica se o valor é vazio
                if (empty($valor)) {
                    $where .= ($where ? ' AND ' : '') . "$atributo IS NULL";
                    continue; // Pula para a próxima iteração
                }

                // Formata o texto para uso com o operador LIKE
                if ($like && is_string($valor)) {
                    $valor = "%$valor%";
                    $operator = "LIKE";
                }

                $valor = "'".addslashes($valor)."'";
                $where .= ($where ? ' AND ' : '') . "$atributo $operator $valor";
            }
            $where = "WHERE $where";
        }

        // Monta a cláusula ORDER BY da consulta
        $order = '';
        if ($orderby !== null) {
            if (is_array($orderby)) {
                $order = 'ORDER BY ';
                foreach ($orderby as $atributo => $direcao) {
                    $order .= "$atributo $direcao, ";
                }
                $order = rtrim($order, ', ');
            } else {
                $order = "ORDER BY $orderby";
            }
        }

        // Monta a cláusula GROUP BY da consulta
        $group = '';
        if ($groupby !== null) {
            $group = "GROUP BY $groupby";
        }

        $limited = '';
        if ($limit !== null) {
            $limited = "LIMIT $limit";
        }

        // Monta a consulta completa
        $sql = "SELECT $atributos FROM $tabelas $where $group $order $limited";
        $this->query($sql);
        return $this->fetch_multiarray($sql, MYSQLI_ASSOC);
    }
}

?>